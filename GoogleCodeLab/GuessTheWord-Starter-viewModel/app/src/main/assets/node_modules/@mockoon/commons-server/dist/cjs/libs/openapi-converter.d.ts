import { Environment } from '@mockoon/commons';
/**
 * Convert to and from Swagger/OpenAPI formats
 *
 * OpenAPI specifications: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md
 * Swagger specifications: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md
 *
 */
export declare class OpenAPIConverter {
    constructor();
    /**
     * Import Swagger or OpenAPI format
     *
     * @param filePath
     */
    convertFromOpenAPI(filePath: string, port?: number): Promise<Environment | null>;
    /**
     * Convert environment to OpenAPI JSON object
     *
     * @param environment
     */
    convertToOpenAPIV3(environment: Environment): Promise<string>;
    /**
     * Convert Swagger 2.0 format
     *
     * @param parsedAPI
     */
    private convertFromSwagger;
    /**
     * Convert OpenAPI 3.0 format
     *
     * @param parsedAPI
     */
    private convertFromOpenAPIV3;
    /**
     * Creates routes from imported swagger/OpenAPI document
     *
     * @param parsedAPI
     * @param version
     */
    private createRoutes;
    /**
     * Build route response headers from 'content' (v3) or 'produces' (v2), and 'headers' objects
     *
     * @param contentTypes
     * @param responseHeaders
     */
    private buildResponseHeaders;
    /**
     * Replace parameters in `str`
     *
     * @param str
     */
    private v2ParametersReplace;
    /**
     * Replace parameters in `str` with server variables
     *
     * @param str
     * @param parameters
     * @returns
     */
    private v3ParametersReplace;
    /**
     * Swagger specification type guard
     *
     * @param parsedAPI
     */
    private isSwagger;
    /**
     * OpenAPI v3 specification type guard
     *
     * @param parsedAPI
     */
    private isOpenAPIV3;
    /**
     * Generate a JSON object from a schema
     *
     */
    private generateSchema;
    /**
     * After generating example bodies, remove the quotes around some
     * primitive helpers
     *
     * @param jsonSchema
     */
    private convertJSONSchemaPrimitives;
}

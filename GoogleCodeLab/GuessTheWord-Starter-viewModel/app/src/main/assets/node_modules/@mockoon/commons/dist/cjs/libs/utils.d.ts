import { Environment, Environments } from '../models/environment.model';
import { LegacyExport } from '../models/export.model';
import { Header, RouteResponse } from '../models/route.model';
/**
 * Extract the content-type from an array of headers
 *
 * @param headers
 */
export declare const GetContentType: (headers: Header[]) => string | null;
/**
 * Return a route response's content-type.
 * Environment's content-type is overridden by route's content-type
 *
 * @param environment
 * @param routeResponse
 */
export declare const GetRouteResponseContentType: (environment: Environment, routeResponse: RouteResponse) => string;
/**
 * Test if URL is valid
 *
 * @param URL
 */
export declare const IsValidURL: (address: string) => boolean;
/**
 * Verify if the object is a Mockoon legacy export data object
 *
 * @param data
 * @returns
 */
export declare const IsLegacyExportData: (data: Environment | LegacyExport) => data is LegacyExport;
/**
 * Import legacy export Mockoon's format.
 * Data was wrapped and could enclose multiple environments (and routes):
 *
 * ```
 * {
 *   "source": "mockoon:1.17.0",
 *   "data": [
 *     {
 *       "type": "environment",
 *       "item": {
 *         "uuid": "",
 *         "lastMigration": 13,
 *         "name": "Tutorial - Generate mock data"
 *         ...
 *       }
 *     }
 *   ]
 * }
 *
 * ```
 */
export declare const UnwrapLegacyExport: (exportData: LegacyExport) => Environments;
/**
 * Clone an object using JSON.stringify
 * /!\ Suitable for Environment, Route, etc but not for complex objects containing Map, Set, etc
 */
export declare const CloneObject: (objectToClone: any) => any;
/**
 * Compare two objects using JSON.Stringify
 */
export declare const IsEqual: (firstObject: any, secondObject: any) => boolean;
export declare const RemoveLeadingSlash: (str: string) => string;

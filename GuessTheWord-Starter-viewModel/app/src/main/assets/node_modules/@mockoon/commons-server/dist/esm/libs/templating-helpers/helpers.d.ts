import { HelperOptions, SafeString } from 'handlebars';
/**
 * Handlebars may insert its own `options` object as the last argument.
 * Be careful when retrieving `defaultValue` or any other last param.
 *
 * use:
 * if (typeof defaultValue === 'object') {
 *   defaultValue = '';
 * }
 *
 * or:
 * args[args.length - 1]
 */
export declare const Helpers: {
    repeat: (min: number, max: number, options: HelperOptions | any) => string;
    oneOf: (itemList: string[]) => string;
    someOf: (itemList: string[], min: number, max: number, asArray?: boolean) => string | string[];
    array: (...args: any[]) => any[];
    switch: (value: any, options: HelperOptions) => string;
    case: (...args: any[]) => any;
    default: (options: HelperOptions) => string | undefined;
    now: (format: any) => string;
    base64: (...args: any[]) => SafeString;
    newline: () => string;
    objectId: (defaultValue: any) => string;
    concat: (...args: any[]) => string;
    dateTimeShift: (options: HelperOptions) => string;
    indexOf: (data: string | SafeString | HelperOptions, search: string | SafeString | HelperOptions | undefined, position?: number | string | SafeString | HelperOptions | undefined) => number;
    includes: (data: string | SafeString | HelperOptions, search: string | SafeString | HelperOptions | undefined) => boolean;
    substr: (data: string | SafeString | HelperOptions, from: number | string | SafeString | HelperOptions | undefined, length: number | string | SafeString | HelperOptions | undefined) => string;
    split: (...args: any[]) => string[] | "";
    join: (arr: string[], sep: string) => string;
    slice: (arr: Array<unknown>, sliceFrom: number, sliceTo?: number | unknown) => any[] | "";
    len: (arr: Array<unknown> | string) => number;
    eq: (num1: number | string, num2: number | string) => boolean;
    gt: (num1: number | string, num2: number | string) => boolean;
    gte: (num1: number | string, num2: number | string) => boolean;
    lt: (num1: number | string, num2: number | string) => boolean;
    lte: (num1: number | string, num2: number | string) => boolean;
    setVar: (name: string, value: unknown, options: HelperOptions) => void;
    int: (...args: any[]) => any;
    float: (...args: any[]) => any;
    date: (...args: any[]) => any;
    time: (...args: any[]) => string;
    boolean: () => any;
    title: () => any;
    firstName: () => any;
    lastName: () => any;
    company: () => any;
    domain: () => any;
    tld: () => any;
    email: () => any;
    street: () => any;
    city: () => any;
    country: () => any;
    countryCode: () => any;
    zipcode: () => any;
    postcode: () => any;
    lat: () => any;
    long: () => any;
    phone: () => any;
    color: () => any;
    hexColor: () => string;
    guid: () => any;
    ipv4: () => any;
    ipv6: () => any;
    lorem: (...args: any[]) => any;
    helperMissing: () => string;
    add: (...args: any[]) => any;
    subtract: (...args: any[]) => any;
    multiply: (...args: any[]) => any;
    divide: (...args: any[]) => any;
    modulo: (...args: any[]) => number | "";
    ceil: (...args: any[]) => number | "";
    floor: (...args: any[]) => number | "";
    round: (...args: any[]) => number | "";
    toFixed: (number: number, digits: number) => string;
    stringify: (data: unknown, options: HelperOptions) => unknown;
};
